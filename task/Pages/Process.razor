@page "/"
@using task.Data
@using task.Entity

<div class="d-flex flex-column">
    <div class="slider-wrapper @SliderClass">
        <Slider />
    </div>
    <div class="collapse-button text-center mb-3" style="background:#eaeaea75">
        <button title="Navigation menu" class="navbar-toggler border-0 shadow-none" @onclick="ToggleSlider">
            <i class="fas fa-minus"></i>
        </button>
    </div>
</div>

<!-- Dropdowns -->
<div class="container mb-5">
    <div class="buttons">
        <div class="dropdown">
            <button class="btn btn-secondary days dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                @SelectedDate
            </button>
            <ul class="dropdown-menu">
                @foreach (var date in DateRanges)
                {
                    <li><a class="dropdown-item" @onclick="(() => DateSelected(date))">@date</a></li>
                }
            </ul>
        </div>

        <div class="dropdown">
            <button class="btn btn-secondary dates dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                @SelectedSortOption
            </button>
            <ul class="dropdown-menu">
                @foreach (var option in SortOptions)
                {
                    <li class="date-dropdown">
                        <a class="dropdown-item" @onclick="(() => SortOptionSelect(option))">@option</a>
                    </li>
                }
            </ul>
        </div>

        <div class="button-disable">
            <i class="fas fa-arrow-up-right-from-square"></i>
        </div>
    </div>
</div>

<Process_Detail Vehicles="Vehicles" />

@code {
    private bool collapseSlider = true;
    private List<Vehicle> Vehicles = new(); // Görüntülenecek araçlar
    private List<Vehicle> OriginalVehicles = new(); // Orijinal araç verileri
    private List<string> DateRanges = new() { "Son 7 Gün", "Son 15 Gün" };
    private string SelectedDate = "Son 7 Gün";

    private string SliderClass => collapseSlider ? "collapsed" : "";

    protected override void OnInitialized()
    {
        OriginalVehicles = VechilesData.Vehicles; 
        Vehicles = new List<Vehicle>(OriginalVehicles);
    }

    private void ToggleSlider()
    {
        collapseSlider = !collapseSlider;
    }

    private void DateSelected(string date)
    {
        SelectedDate = date;
        FilterVehicles();
    }

    private void FilterVehicles()
    {
        // Seçilen tarih aralığına göre araçları filtrele
        DateTime startDate;
        if (SelectedDate == "Son 7 Gün")
        {
            startDate = DateTime.Now.AddDays(-7); 
        }
        else if (SelectedDate == "Son 15 Gün")
        {
            startDate = DateTime.Now.AddDays(-15); 
        }
        else
        {
            startDate = DateTime.MinValue;
        }

        Vehicles = OriginalVehicles.Where(v => v.Date >= startDate).ToList();

     
        Filtered();
    }

    private string SelectedSortOption = "Tarihe Göre Sırala";

    
    private List<string> SortOptions = new()
{
    "Tarihe Göre Sırala", 
    "Tüketime Göre Sırala", 
};


    private void SortOptionSelect(string option)
    {
        // sıralama seçeneğini güncelle
        SelectedSortOption = option;

        //  sıralamayı uygula
        Filtered();
    }


    //Hangi filtereleme çalıacaksa onu filtreyen method
    private void Filtered()
    {
        if (SelectedSortOption == "Tarihe Göre Sırala")
        {
           
            //, en eski tarihten en yeni tarihe doğru sıralama 
            Vehicles = Vehicles.OrderBy(v => v.Date).ToList();
        }
        else if (SelectedSortOption == "Tüketime Göre Sırala")
        {
          
            // en yüksek tüketime sahip araçlardan en düşük tüketime sahip araçlara doğru sıralama.
            Vehicles = Vehicles.OrderByDescending(v => v.TotalKw).ToList();
        }
 
    }

}
